version: 2.1

parameters:
  workflow_id:
    type: string
    default: ${CIRCLE_WORKFLOW_ID:0:7}

commands:
  destroy-environment-on-fail:
    description: Destroy AWS provisioned resources on fail
    steps:
      - run:
          name: Destroy environments on fail
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "testec2-<< pipeline.parameters.workflow_id >>"

  destroy-environment-on-pass:
    description: Destroy AWS provisioned resources on fail
    steps:
      - run:
          name: Destroy environments on pass
          when: on_success
          command: |
            aws cloudformation delete-stack --stack-name "testec2-<< pipeline.parameters.workflow_id >>"

jobs:
  # create-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Setup EC2 instance"
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file infra/backend.yml \
  #             --tags project=testing \
  #             --stack-name "testec2-<< pipeline.parameters.workflow_id >>" \
  #             --parameter-overrides ID="<< pipeline.parameters.workflow_id >>"

  #     - destroy-environment-on-fail

  # update-inventory-file:
  #   docker:
  #     - image: amazon/aws-cli

  #   steps:
  #     - checkout
  #     - run:
  #         name: Install tar and gzip
  #         command: |
  #           yum install -y tar gzip

  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           aws ec2 describe-instances \
  #             --filters Name=tag:Name,Values=testec2-<< pipeline.parameters.workflow_id >> \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text | cat >> .circleci/ansible/inventory.txt
  #           cat .circleci/ansible/inventory.txt

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt

  #     - destroy-environment-on-fail

  # get-ip-address:
  #   docker:
  #     - image: amazon/aws-cli

  #   steps:
  #     - checkout
  #     - run:
  #         name: Get EC2 Ip address
  #         command: |
  #           BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=testec2-<< pipeline.parameters.workflow_id >> --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
  #           echo $BACKEND_IP
  #           echo "export BACKEND_IP=${BACKEND_IP}" >> $BASH_ENV
  #     - run:
  #         name: Check if IP still available
  #         command: |
  #           echo ${BACKEND_IP}

  #     - destroy-environment-on-fail
  #     - destroy-environment-on-pass

  # archive-infra-folder:
  #   docker:
  #     - image: cimg/python:3.7.13
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["1d:83:9d:af:35:e2:5b:9c:ae:3c:89:6b:43:be:ef:4e"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install AWSCLI and Ansible
  #         command: |
  #           pip3 install awscli
  #           pip3 install ansible
  #     - run:
  #         name: Archive folder
  #         command: |
  #           tar -C infra -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt unarchive-infra.yml

  #     - destroy-environment-on-fail
  #     - destroy-environment-on-pass
    
#   test-2:
#     docker:
#       - image: circleci/node:13.8.0

#     steps:
#         - checkout
#         - attach_workspace:
#           at: ~/
#         - run:
#             name: Check if file was updated
#             command: |
#               cat .circleci/ansible/inventory.txt

  # configure-infrastructure:
  #     docker:
  #       - image: cimg/python:3.7.13
  #     steps:
  #       - checkout
  #       - add_ssh_keys:
  #           fingerprints: ["1d:83:9d:af:35:e2:5b:9c:ae:3c:89:6b:43:be:ef:4e"] 

  #       - attach_workspace:
  #           at: ~/

  #       - run:
  #           name: Install dependencies
  #           command: |
  #             pip3 install ansible
  #             pip3 install --no-cache-dir awscli

  #       - run:
  #           name: Configure server
  #           command: |
  #             cd .circleci/ansible
  #             ansible-playbook -i inventory.txt configure-server.yml
        
  #       - destroy-environment-on-fail
  #       - destroy-environment-on-pass

  # check-image:
  #   docker:
  #     - image: cimg/python:3.8.13-node

  #   steps:
  #     - checkout
  #     - run:
  #         name: Check if npm exists
  #         command:
  #           npm --version

  job-1:
    docker:
      - image: cimg/base:2021.11
    steps:
      - run:
          name: Export a variable
          command: |
            FOO="Bar"
            echo $FOO
            echo 'export FOO=$(echo $FOO)' >> $BASH_ENV

      - run:
          name: Get var
          command: |
            cat $BASH_ENV
            source $BASH_ENV
            echo $FOO

  # job-2:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run:
  #         name: Retrieve previously exported variable
  #         command: |
  #           if [[ `echo ${FOO} == "Bar"` ]];
  #           then echo "Persisted across jobs";
  #           else echo "Not persisted across jobs";
  #           fi

workflows:
  test-workflow:
    jobs:
      # - check-image
      # - create-infrastructure
      # - update-inventory-file:
      #     requires:
      #       - create-infrastructure
      # - configure-infrastructure:
      #     requires:
      #       - update-inventory-file
      # - archive-infra-folder:
      #     requires:
      #       - update-inventory-file
      - job-1
      # - job-2:
      #     requires:
      #       - job-1
      # - get-ip-address:
      #     requires:
      #       - create-infrastructure


